#
# Copyright (c) 2012-2017 Red Hat, Inc.
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#   Red Hat, Inc. - initial API and implementation
#

### CHE SERVER
# Folder where Che will store internal data objects
che.database=${che.home}/storage

# API service. Browsers initiate REST communications to Che server with this URL
che.api=http://${CHE_HOST}:${CHE_PORT}/api

# Che websocket endpoint. Provides basic communication endpoint
# for websocket interaction/messaging.
che.websocket.endpoint=ws://${CHE_HOST}:${CHE_PORT}/api/websocket

# Your projects are synchronized from the Che server into the machine running each
# workspace. This is the directory in the ws runtime where your projects are mounted.
che.workspace.storage=${che.home}/workspaces

# Your projects are synchronized from the Che server into the machine running each
# workspace. This is the directory in the machine where your projects are placed.
che.workspace.projects.storage=/projects

# Configures proxies used by runtimes powering workspaces
che.workspace.http_proxy=
che.workspace.https_proxy=
che.workspace.no_proxy=

# Configures dns resolving servers. May contain several values separated by comma sign.
che.dns.resolvers=

# By default, when users access to a workspace with its URL the workspace
# automatically starts if it is stopped. You can set this to false to disable this.
che.workspace.auto_start=true

# Workspace threads pool configuration, this pool is used for workspace related
# operations that require asynchronous execution e.g. starting/stopping

# possible values are 'fixed', 'cached'
che.workspace.pool.type=fixed

# This property is ignored when pool type is different from 'fixed'.
# Configures the exact size of the pool, if it's set multiplier property is ignored.
# If this property is not set(0, < 0, NULL) then pool sized to number of cores,
#it can be modified within multiplier
che.workspace.pool.exact_size=NULL

# This property is ignored when pool type is different from 'fixed' or exact pool size is set.
# If it's set the pool size will be N_CORES * multiplier
che.workspace.pool.cores_multiplier=2


# Java command line options used to start Che agent in workspace runtime
che.workspace.java.options=-Xms256m -Xmx2048m -Djava.security.egd=file:/dev/./urandom

# Maven command line options will be exported as value of MAVEN_OPTS
# environment variable in workspace dev-machine.
# If the value is not set then the value provided by 'che.workspace.java.options' property is used
che.workspace.maven.options=NULL

# Folder that will be a volume mount from your host into your workspace.
che.workspace.volume=

# If your workspace creates SSH connections, their timeouts are managed by this property.
che.workspace.ssh_connection_timeout_ms=10000

# The location of the Web terminal used within the browser.
# This is copied into the workspace and runs within the workspace.
# Suffix helps differentiate archive for different architectures/OSes
che.workspace.terminal_linux_amd64=${che.home}/lib/linux_amd64/terminal
che.workspace.terminal_linux_arm7=${che.home}/lib/linux_arm7/terminal

che.workspace.exec_linux_amd64=${che.home}/lib/linux_amd64/exec

# RAM default for each machine that has no RAM settings in environment.
che.workspace.default_memory_mb=1024

# This archive contains the server to run the workspace agent and any custom extensions.
# Che injects this archive into machines when they are booted or started.
# Each machine can have many agents installed, each located in a different location.
che.workspace.agent.dev=${che.home}/lib/ws-agent.tar.gz

# Hosts listed here will be added to /etc/hosts of each workspace.
che.workspace.hosts=NULL

### AGENTS
# When the Che server launches a new workspace, Che pings a mini Che server running inside of the
# workspace runtime. We call this mini-Che an "agent". The Che server knows that the workspace
# is ready for user when the agent returns a valid response.
che.workspace.agent.dev.max_start_time_ms=180000
che.workspace.agent.dev.ping_delay_ms=2000
che.workspace.agent.dev.ping_conn_timeout_ms=2000
che.workspace.agent.dev.ping_timeout_error_msg=Timeout. The Che server is unable to ping your workspace. This implies a network configuration issue, workspace boot failure, or an unusually slow workspace boot.

che.installer.registry.remote=NULL

che.agent.dev.max_start_time_ms=120000
che.agent.dev.ping_delay_ms=2000

# Idle Timeout
#     The system will suspend the workspace if the end user is idle for
#     this amount of time. Idleness is determined by the length of time that a user has
#     not interacted with the workspace. Leaving a browser window open counts as idleness time.
che.workspace.agent.dev.inactive_stop_timeout_ms=3600000
che.workspace.activity_check_scheduler_period_s=60

### TEMPLATES
# Folder that contains JSON files with code templates and samples
che.template.storage=${che.home}/templates


### AUTHENTICATION PARAMETERS
# Che has a single identity implementation, so this does not change the user experience.
# If true, enables user creation at API level
che.auth.user_self_creation=false

che.auth.access_denied_error_page=/error-oauth

# Reserved user names
che.auth.reserved_user_names=

# You can setup GitHub oAuth to automate authentication to remote repositories.
# You need to first register this application with GitHub oAuth.
che.oauth.github.clientid=NULL
che.oauth.github.clientsecret=NULL
che.oauth.github.authuri= https://github.com/login/oauth/authorize
che.oauth.github.tokenuri= https://github.com/login/oauth/access_token
che.oauth.github.redirecturis= http://localhost:${CHE_PORT}/api/oauth/callback


### DOCKER PARAMETERS
# Docker is the default machine implementation within Che. Workspaces are powered by machines
# that are constructed when the workspace is started. The images used to generate containers
# for the machines can come from DockerHub or a private Docker registry.
che.docker.registry=${CHE_REGISTRY_HOST}:5000

# If this is true, then we always pull an image from a registry even if we have an image cached
# locally. If false, Docker only pulls image if it does not exist locally.
che.docker.always_pull_image=true

# If true, then launches all workspace runtime containers with Docker's
# privileged mode. Please use responsibly. This is required if you want Che workspaces
# to be able to launch their own runtimes which are embedded Docker containers.
che.docker.privileged=false

# This parameter allows to specify custom security options for the created docker container.
# seccomp:unconfined is the default for kubernetes, but not for docker. This is needed
# for debugging with gdbserver. See https://github.com/eclipse/che/issues/4284 for details.
# Parameters are passed as an array, so you can add multiple 
# values comma seperated. Please also see https://docs.docker.com/engine/api/v1.21/#2-endpoints,
# in particular the "HostConfig":{"SecurityOpt": []} entry. If this parameter is empty,
# docker blocks certain Syscalls by default https://docs.docker.com/engine/security/seccomp/
# WARNING: if you give incorrect values, docker gives an error and doesn't start the container
# Example: che.docker.securityopt=seccomp:unconfined,apparmor:unconfined
che.docker.securityopt=

# Limits the number of processes that can be forked inside a cgroup. Set -1 for unlimited.
# Since 4.3 kernel.
che.docker.pids_limit=-1

# Sets parent cgroup for cgroups of containers created by workspaces.
# This allows an admin to set custom cgroup limitations to all containers of workspaces by configuring cgroups.
# Example:
# /my_group
# my_another_group
che.docker.parent_cgroup=NULL

# Sets set of CPUs that can be used by each container of started workspace.
# Example:
# 0-3
# 1,4
che.docker.cpuset_cpus=NULL

# Next 2 properties set limits on CPU consumption by containers of started workspaces.
# Period sets amount of units per CPU core.
# Quota sets amount of units available for container per whole CPU.
# Max value of quota could be period * number of CPU cores in a system.
# Example:
# che.docker.cpu_period=5000
# che.docker.cpu_quota=10000
che.docker.cpu_period=0
che.docker.cpu_quota=0

# Adds options when mounting the /projects volume.
che.docker.volumes_projects_options=Z

# Adds options when mounting the /mnt/che/terminal, /mnt/che/ws-agent.tar.gz, /mnt/che/conf volume
che.docker.volumes_agent_options=ro,Z

# If the browser clients that are accessing Che are remote AND the configuration of Docker is an
# internal IP address or using Unix sockets, then remote browser clients will not be able to connect
# to the workspace. Set the Docker configuration so that Docker containers have an external IP
# address and provide that external host or IP address here.
# This is uncommon, and only needed for advanced Docker configurations.
che.docker.ip=NULL

# The hostname that a browser should use to connect to a workspace container.
# Only set this if your workspace containers are not directly pingable.
# This is unusual, but happens for example in Docker for Mac when containers are in a VM.
che.docker.ip.external=NULL

# The server evaluation strategy to be used to determine servers exposed by workspaces.
# Options:
#   - 'default':      internal address is address of docker host and ephemeral port are used
#   - 'docker-local': internal address is address of container within docker network, and exposed ports
#                     are used.
#   - 'custom': The evaluation strategy may be customized through a template property.
#   - 'docker-local-custom':  internal address is set as in docker-local strategy, external address is composed
#                     as in the custom strategy with the 'template' and the 'external.protocol' properties.

# The 'docker-local' strategy may be useful if a firewall prevents communication between che-server and
# workspace containers, but will prevent communication when che-server and workspace containers are not
# on the same Docker network.
# The 'docker-local-custom' strategy may be useful when Che and the workspace servers need to be exposed on the
# same single TCP port.
che.docker.server_evaluation_strategy=default


# Here are macros available for the custom server evaluation strategy
# serverName: server reference exposing the port (like tomcat8, ws-agent, etc)
# machineName: name of the machine of the workspace. (like devMachine)
# workspaceId: id of the workspace
# internalIp: IP of the internal address of che (che.docker.ip property)
# externalIP: IP of the external address of che
# externalAddresss : external address of che (che.docker.ip.external or if null che.docker.ip)
# chePort : Che listening port number of workspace master
# wildcardNipDomain : get external address transformed into a nip.io DNS sub-domain
# wildcardXipDomain : get external address transformed into a xip.io DNS sub-domain
# user : name of the current user 
# workspacesRoutingSuffix: explicit routing suffix for workspace agents (see property che.workspaces.routing-suffix) 
che.docker.server_evaluation_strategy.custom.template=<serverName>.<machineName>.<workspaceId>.<wildcardNipDomain>:<chePort>

# Protocol to use for http access (for example it can be set to https)
che.docker.server_evaluation_strategy.custom.external.protocol=http

# Provides a Docker network where Che server is running.
# Workspace containers created by Che will be added to this Docker network.
# Communications between the Che server and container occur over this network.
che.docker.network=NULL

# Docker unused containers and networks cleanup period
che.docker.cleanup_period_min=60

# Version number of the Docker API used within the Che implementation
che.docker.api=1.21

# Whether to enable component that detects failures of a machine caused by unexpected container stop
che.docker.enable_container_stop_detector=true

che.docker.network_driver=NULL

che.docker.tcp_connection_timeout_ms=600000
che.docker.tcp_connection_read_timeout_ms=600000

# Docker registry example. Uncomment to add a registry configuration.
# You can configure multiple registries with different names.
#che.docker.registry.auth.<insert-name>.url=https://index.docker.io/v1/
#che.docker.registry.auth.<insert-name>.username=<username>
#che.docker.registry.auth.<insert-name>.password=<password>

# Allows to adjust machine swap memory by multiplying current machnine memory to provided value.
# default is -1 which is unlimited swap. If set, value is multipled by machine memory set by user
# to determine swap size. To disable swap set to 0.
che.docker.swap=-1

### Che docker infrastructure parameters

# This is the API endpoint of the workspace master running within the core Che server.
# This tells the workspace agent how to connect back to the Che server.
# che-host is a hostname entry added to /etc/hosts of the workspace by the Che server.
che.infra.docker.master_api_endpoint=http://che-host:${CHE_PORT}/api

# This is the webscoket base endpoint of the workspace master running within the core Che server.
che.infra.docker.master_websocket_endpoint=ws://che-host:${CHE_PORT}/api/websocket

# Time (in minutes) given for bootstrapping.
# If boostrapping is not finished in time it will be failed and workspace start will fail.
che.infra.docker.bootstrapper.timeout_min=10

# Time (in seconds) given for one installer to complete its installation.
# If installation is not finished in time it will be interrupted.
che.infra.docker.bootstrapper.installer_timeout_sec=180

# Time(in seconds) between servers availability checks.
# Once servers for one installer available - checks stopped.
che.infra.docker.bootstrapper.server_check_period_sec=3

### INTERNAL
# Remove locations where internal message bus events should be propagated to.
# For debugging - set to retrieve internal events from external clients.
notification.server.propagate_events=

# Che extensions can be scheduled executions on a time basis.
# This configures the size of the thread pool allocated to extensions that are launched on
# a recurring schedule.
schedule.core_pool_size=10

# Everrest is a Java Web Services toolkit that manages JAX-RS & web socket communications
# Users should rarely need to configure this.
# Disable asynchronous mechanism that is embedded in everrest.
org.everrest.asynchronous=false
# Quantity of asynchronous requests which may be processed at the same time
org.everrest.asynchronous.pool.size=20
# Size of queue. If asynchronous request can't be processed after consuming it will be added in queue.
org.everrest.asynchronous.queue.size=500
# Timeout in minutes for request. If after timeout request is not done or client did not come yet to get result of request it may be discarded.
org.everrest.asynchronous.job.timeout=10
# Size of cache for waiting, running and ended request.
org.everrest.asynchronous.cache.size=1024
# Path to asynchronous service
org.everrest.asynchronous.service.path=/async/

# DB initialization and migration configuration
db.schema.flyway.baseline.enabled=true
db.schema.flyway.baseline.version=5.0.0.8.1
db.schema.flyway.scripts.prefix=
db.schema.flyway.scripts.suffix=.sql
db.schema.flyway.scripts.version_separator=__
db.schema.flyway.scripts.locations=classpath:che-schema

# Defines whether stacks loaded once or each time server starts.
# If value is 'false' stacks will be loaded once after database is initialized,
# otherwise stacks will be loaded each time server starts.
# Stacks loading overrides existing predefined stacks with new data
# defined in stacks.json.
#     - 'default'   : false
# Note that this property is needed for backward compatibility and will be removed soon.
che.predefined.stacks.reload_on_start=false

### OpenShift Infra parameters

che.infra.openshift.master_url=
che.infra.openshift.username=
che.infra.openshift.password=
che.infra.openshift.oauth_token=
che.infra.openshift.trust_certs=

# Create routes with Transport Layer Security (TLS) enabled
che.infra.openshift.tls_enabled=false

# Defines OpenShift namespace in which all workspaces will be created.
# If not set, every workspace will be created in a new project, where project name = workspace id
che.infra.openshift.project=

che.infra.openshift.machine_start_timeout_min=5

che.infra.openshift.bootstrapper.binary_url=http://${CHE_HOST}:${CHE_PORT}/agent-binaries/linux_amd64/bootstrapper/bootstrapper
che.infra.openshift.bootstrapper.timeout_min=10
che.infra.openshift.bootstrapper.installer_timeout_sec=180
che.infra.openshift.bootstrapper.server_check_period_sec=3

# Defines whether use the Persistent Volume Claim for che workspace needs
# e.g backup projects, logs etc or disable it.
che.infra.openshift.pvc.enabled=true

# Defined which strategy will be used while choosing PVC for workspaces.
#
# Supported strategies:
# - 'common'
#        PVC with name that is configured by 'che.infra.openshift.pvc.name'
#        property will be used for storing workspaces data of each workspace
#        in an OpenShift project.
#        Existing PVC will be used or new one will be created if it doesn't exist.
#
# - 'unique'
#        PVC with name that is evaluated as '{che.infra.openshift.pvc.name} + '-' + {WORKSPACE_ID}'
#        will be used for storing of workspaces data.
#        Existing PVC will be used or a new one will be created if it doesn't exist.
che.infra.openshift.pvc.strategy=common

# Defines whether to run a job that creates workspace's subpath directories in persistent volume for the 'common' strategy before launching a workspace.
# Necessary in some versions of OpenShift/Kubernetes as workspace subpath volume mounts are created with root permissions,
# and thus cannot be modified by workspaces running as a user (presents an error importing projects into a workspace in Che).
# The default is "true", but should be set to false if the version of Openshift/Kubernetes creates subdirectories with user permissions.
# Relevant issue: https://github.com/kubernetes/kubernetes/issues/41638
# Note that this property has effect only if the 'common' PVC strategy used.
che.infra.openshift.pvc.precreate_subpaths=true

# Defines the name of Persistent Volume Claim for che workspaces.
che.infra.openshift.pvc.name=claim-che-workspace

# Defines the size of Persistent Volume Claim of che workspace.
# Format described here:
# https://docs.openshift.com/container-platform/latest/dev_guide/compute_resources.html#dev-compute-resources
che.infra.openshift.pvc.quantity=10Gi

# Pod that is launched when performing persistent volume claim maintenance jobs on OpenShift
che.infra.openshift.pvc.jobs.image=centos:centos7

# Defines pod memory limit for persistent volume claim maintenance jobs
che.infra.openshift.pvc.jobs.memorylimit=250Mi

# Defines Persistent Volume Claim access mode.
# Note that for common PVC strategy changing of access mode affects the number of simultaneously running workspaces.
# If OpenShift flavor where che running is using PVs with RWX access mode then a limit of running workspaces at the same time
# bounded only by che limits configuration like(RAM, CPU etc).
# Detailed information about access mode is described here:
# https://docs.openshift.com/container-platform/latest/architecture/additional_concepts/storage.html#pv-access-modes
che.infra.openshift.pvc.access_mode=ReadWriteOnce
